<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>portswigger on A1ux</title>
    <link>https://www.alux.cc/tags/portswigger/</link>
    <description>Recent content in portswigger on A1ux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-GT</language>
    <lastBuildDate>Thu, 04 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.alux.cc/tags/portswigger/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Portswigger Academy Learning Path: SQL Injection Lab 3</title>
      <link>https://www.alux.cc/p/portswigger-academy-learning-path-sql-injection-lab-3/</link>
      <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.alux.cc/p/portswigger-academy-learning-path-sql-injection-lab-3/</guid>
      <description>Lab: SQL injection UNION attack, determining the number of columns returned by the query En este laboratorio1la finalidad es recuperar el numero de columnas de la tabla a la que se esta realizando la consulta, para posteriormente poder extraer los datos basandose en ese numero de columnas. Para este caso se puede hacer uso de dos metodos que pueden ser ORDER BY ? o UNION SELECT NULL,NULL,NULL...
Usando algunos de estos dos podemos recuperar el numero de columnas, sabiendo que a la hora que la aplicacion genere un error no sera el numero de columna correcta, claramente si usamos un order by 9 y secuencialmente llegamos hasta el 10 quiere decir que esa tabla cuenta con 9 columnas y son las que utilizaremos posteriormente para imprimir los datos.</description>
    </item>
    
    <item>
      <title>Portswigger Academy Learning Path: SQL Injection Lab 2</title>
      <link>https://www.alux.cc/p/portswigger-academy-learning-path-sql-injection-lab-2/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.alux.cc/p/portswigger-academy-learning-path-sql-injection-lab-2/</guid>
      <description>Lab: SQL injection vulnerability allowing login bypass En este laboratorio se pretende explotar un SQL Injection, esta vez es un inicio de sesion, y se intentara explotar como en el laboratorio 1 en el cual se tiene que tratar de hacer un bypass para que el sistema no valide el resto que seria la contrasena. La consulta que hara seguramente sera:
SELECT*FROMusersWHEREusername=&amp;#39;usuario&amp;#39;ANDpassword=&amp;#39;contrasena&amp;#39;Reconocimiento Se tratara de hacer que el sistema ya no invalide la contrasena que es enviada en la peticion, todo esto comentando lo que le sigue, de esta manera:</description>
    </item>
    
    <item>
      <title>Portswigger Academy Learning Path: SQL Injection Lab 1</title>
      <link>https://www.alux.cc/p/portswigger-academy-learning-path-sql-injection-lab-1/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.alux.cc/p/portswigger-academy-learning-path-sql-injection-lab-1/</guid>
      <description>Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data Este laboratorio contiene una vulnerabilidad de SQL Injection y la manera de resolverlo es que haga un ataque de SQL y que muestra los detalles de todos los productos en cualquier categoria, tanto released como unreleased.
Nos regalan una pista y se nos dice que el sistema realiza la siguiente consulta SQL
SELECT*FROMproductsWHEREcategory=&amp;#39;Gifts&amp;#39;ANDreleased=1Reconocimiento Como lo explica en la lectura del laboratorio, la aplicacion recupera datos de la categoria Gifts y que solo se muestre los datos que tengan released como valor 1.</description>
    </item>
    
  </channel>
</rss>
